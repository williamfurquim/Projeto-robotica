#include <WiFi.h>

// Credenciais Wi-Fi
const char* ssid     = "ESP32-Network";
const char* password = "Esp32-Password";

// Webserver
WiFiServer server(80);
String header;

// Máquina - Saídas
#define SAIDA_D23  23  // AVANÇO ROTATIVO
#define SAIDA_D22  22  // RECUO
#define SAIDA_D21  21  // MAGAZINE
#define SAIDA_D19  19  // VÁCUO
#define SAIDA_D18  18  // SOLTA PEÇA

// Entradas
#define ENTRADA_VP   36
#define ENTRADA_D34  34
#define ENTRADA_D32  32
#define ENTRADA_D25  25

// Estados
enum Estado {
  ESTADO_PARADO,
  ESTADO_1, ESTADO_2, ESTADO_3, ESTADO_4, ESTADO_5
};

Estado estadoAtual = ESTADO_PARADO;
bool processoAtivo = false;

void setup() {
  Serial.begin(115200);

  // Configura saídas
  pinMode(SAIDA_D23, OUTPUT);
  pinMode(SAIDA_D22, OUTPUT);
  pinMode(SAIDA_D21, OUTPUT);
  pinMode(SAIDA_D19, OUTPUT);
  pinMode(SAIDA_D18, OUTPUT);

  // Entradas
  pinMode(ENTRADA_VP, INPUT);
  pinMode(ENTRADA_D34, INPUT);
  pinMode(ENTRADA_D32, INPUT);
  pinMode(ENTRADA_D25, INPUT);

  WiFi.softAP(ssid, password);
  Serial.println("IP address: ");
  Serial.println(WiFi.softAPIP());

  server.begin();
}

void loop() {
  WiFiClient client = server.available();
  if (client) {
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        header += c;
        if (c == '\n') {
          if (currentLine.length() == 0) {
            // Lê os comandos da URL
            if (header.indexOf("GET /start") >= 0) {
              processoAtivo = true;
              estadoAtual = ESTADO_1;
            } else if (header.indexOf("GET /stop") >= 0) {
              processoAtivo = false;
              estadoAtual = ESTADO_PARADO;
              desligarTudo();
            }

            // Página HTML
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html\r\n");
            client.println("<!DOCTYPE html><html><head><title>Controle</title></head><body>");
            client.println("<h1>Controle da Máquina</h1>");
            client.println("<p><a href=\"/start\"><button>Iniciar Processo</button></a></p>");
            client.println("<p><a href=\"/stop\"><button>Parar Tudo</button></a></p>");
            client.println("</body></html>");
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    header = "";
    client.stop();
  }

  if (processoAtivo) {
    executarEstados();
  }
}

void desligarTudo() {
  digitalWrite(SAIDA_D23, LOW);
  digitalWrite(SAIDA_D22, LOW);
  digitalWrite(SAIDA_D21, LOW);
  digitalWrite(SAIDA_D19, LOW);
  digitalWrite(SAIDA_D18, LOW);
}

// Código da máquina (baseado no seu original)
void executarEstados() {
  switch (estadoAtual) {
    case ESTADO_1:
      if (digitalRead(ENTRADA_VP) == LOW) {
        digitalWrite(SAIDA_D21, HIGH); // Magazine avança
        estadoAtual = ESTADO_2;
      }
      break;

    case ESTADO_2:
      if (digitalRead(ENTRADA_D34) == HIGH) {
        digitalWrite(SAIDA_D21, LOW);
        digitalWrite(SAIDA_D23, HIGH); // Rotativo avança
        digitalWrite(SAIDA_D19, HIGH); // Vácuo
        delay(1000);
        estadoAtual = ESTADO_3;
      }
      break;

    case ESTADO_3:
      if (digitalRead(ENTRADA_D32) == HIGH) {
        digitalWrite(SAIDA_D23, LOW);
        digitalWrite(SAIDA_D22, HIGH); // Recuo
        delay(2000);
        estadoAtual = ESTADO_4;
      }
      break;

    case ESTADO_4:
      if (digitalRead(ENTRADA_D25) == HIGH) {
        digitalWrite(SAIDA_D19, LOW);
        digitalWrite(SAIDA_D18, HIGH); // Solta peça
        delay(1000);
        estadoAtual = ESTADO_5;
      }
      break;

    case ESTADO_5:
      digitalWrite(SAIDA_D22, LOW);
      digitalWrite(SAIDA_D23, HIGH);
      delay(1300);
      digitalWrite(SAIDA_D23, LOW);
      digitalWrite(SAIDA_D18, LOW);
      estadoAtual = ESTADO_PARADO;
      processoAtivo = false;
      break;

    case ESTADO_PARADO:
      desligarTudo();
      break;
  }
}
