// Permite usar wifi no ESP 32
#include <WiFi.h>

// Permite personalizar a rede com nome e senha
const char* ssid     = "Ariana Grande";
const char* password = "87654321";

// Cria um servidor na porta 80, geralmente usado por sites web
WiFiServer server(80);

String header;

// LED states 
String statePin16 = "off";
String statePin17 = "off";
String statePin18 = "off";
String statePin19 = "off";
String statePin20 = "off";
String statePin21 = "off";
String statePin22 = "off";
String statePin23 = "off";

// Designa a "porta" dos Leds 
const int ledPin16 = 25; // <----- conectar no arduino
const int ledPin17 = 33; // <----- conectar no arduino
const int ledPin18 = 32; // <----- conectar no arduino
const int ledPin19 = 26; // <----- conectar no arduino
const int ledPin20 = 13; // <----- conectar no arduino
const int ledPin21 = 27; // <----- conectar no arduino
const int ledPin22 = 4; // <----- conectar no arduino
const int ledPin23 = 14; // <----- conectar no arduino

// Timing
unsigned long currentTime = millis();
unsigned long previousTime = 0;
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200);

  // Coloca os pinos para gerar energia (modo OUTPUT), e faz com que comece desligado (LOW) 
  pinMode(ledPin16, OUTPUT); digitalWrite(ledPin16, LOW);
  pinMode(ledPin17, OUTPUT); digitalWrite(ledPin17, LOW);
  pinMode(ledPin18, OUTPUT); digitalWrite(ledPin18, LOW);
  pinMode(ledPin19, OUTPUT); digitalWrite(ledPin19, LOW);
  pinMode(ledPin20, OUTPUT); digitalWrite(ledPin20, LOW);
  pinMode(ledPin21, OUTPUT); digitalWrite(ledPin21, LOW);
  pinMode(ledPin22, OUTPUT); digitalWrite(ledPin22, LOW);
  pinMode(ledPin23, OUTPUT); digitalWrite(ledPin23, LOW);

  // Start Access Point - Inicia a rede que foi personalizada e mostra o IP: 192.168.4.1
  WiFi.softAP(ssid, password);
  Serial.println("");
  Serial.println("Access Point IP address:");
  Serial.println(WiFi.softAPIP());

  server.begin(); // Inicia o servidor
}

void loop() {
  WiFiClient client = server.available(); // Verifica se alguém conectou

  if (client) {
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");
    String currentLine = "";

    while (client.connected() && currentTime - previousTime <= timeoutTime) {
      currentTime = millis();
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        header += c;

        if (c == '\n') {
          if (currentLine.length() == 0) {
            // HTTP headers
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Controle dos Leds /////////////////////////////////////////////////////////////////////////////////////////////////////////
            if (header.indexOf("GET /16/on") >= 0) {
              statePin16 = "on"; digitalWrite(ledPin16, HIGH); // Basicamente, se o navegador pedir On ele liga, 
            } else if (header.indexOf("GET /16/off") >= 0) {
              statePin16 = "off"; digitalWrite(ledPin16, LOW); // Se pedir Off então desliga
            }

            if (header.indexOf("GET /17/on") >= 0) {
              statePin17 = "on"; digitalWrite(ledPin17, HIGH);
            } else if (header.indexOf("GET /17/off") >= 0) {
              statePin17 = "off"; digitalWrite(ledPin17, LOW);
            }

            if (header.indexOf("GET /18/on") >= 0) {
              statePin18 = "on"; digitalWrite(ledPin18, HIGH);
            } else if (header.indexOf("GET /18/off") >= 0) {
              statePin18 = "off"; digitalWrite(ledPin18, LOW);
            }

            if (header.indexOf("GET /19/on") >= 0) {
              statePin19 = "on"; digitalWrite(ledPin19, HIGH);
            } else if (header.indexOf("GET /19/off") >= 0) {
              statePin19 = "off"; digitalWrite(ledPin19, LOW);
            }

            if (header.indexOf("GET /20/on") >= 0) {
              statePin20 = "on"; digitalWrite(ledPin20, HIGH);
            } else if (header.indexOf("GET /20/off") >= 0) {
              statePin20 = "off"; digitalWrite(ledPin20, LOW);
            }

            if (header.indexOf("GET /21/on") >= 0) {
              statePin21 = "on"; digitalWrite(ledPin21, HIGH);
            } else if (header.indexOf("GET /21/off") >= 0) {
              statePin21 = "off"; digitalWrite(ledPin21, LOW);
            }

            if (header.indexOf("GET /22/on") >= 0) {
              statePin22 = "on"; digitalWrite(ledPin22, HIGH);
            } else if (header.indexOf("GET /22/off") >= 0) {
              statePin22 = "off"; digitalWrite(ledPin22, LOW);
            }

            if (header.indexOf("GET /23/on") >= 0) {
              statePin23 = "on"; digitalWrite(ledPin23, HIGH);
            } else if (header.indexOf("GET /23/off") >= 0) {
              statePin23 = "off"; digitalWrite(ledPin23, LOW);
            }

            // página HTML 
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            client.println("<style>html { font-family: monospace; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: yellowgreen; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 32px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: gray;}</style></head>");

            client.println("<body><h1>ESP32 Web Server</h1>");
            client.println("<p>Control LED State</p>");

            // GPIO 25
            client.println(statePin16 == "off" ?
              "<p><a href=\"/16/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/16/off\"><button class=\"button button2\">OFF</button></a></p>");

            // GPIO 33
            client.println(statePin17 == "off" ?
              "<p><a href=\"/17/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/17/off\"><button class=\"button button2\">OFF</button></a></p>");

            // GPIO 32
            client.println(statePin18 == "off" ?
              "<p><a href=\"/18/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/18/off\"><button class=\"button button2\">OFF</button></a></p>");

            // GPIO 26 (novo LED) 
            client.println(statePin19 == "off" ?
              "<p><a href=\"/19/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/19/off\"><button class=\"button button2\">OFF</button></a></p>");

 
            client.println(statePin20 == "off" ?
              "<p><a href=\"/20/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/20/off\"><button class=\"button button2\">OFF</button></a></p>");

 
            client.println(statePin21 == "off" ?
              "<p><a href=\"/21/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/21/off\"><button class=\"button button2\">OFF</button></a></p>");

 
            client.println(statePin22 == "off" ?
              "<p><a href=\"/22/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/22/off\"><button class=\"button button2\">OFF</button></a></p>");

 
            client.println(statePin23 == "off" ?
              "<p><a href=\"/23/on\"><button class=\"button\">ON</button></a></p>" :
              "<p><a href=\"/23/off\"><button class=\"button button2\">OFF</button></a></p>");

            client.println("</body></html>");
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }

    // Finaliza a conexão
    header = "";
    client.stop();
    Serial.println("Client disconnected.\n");
  }
}
