#include <WiFi.h>

// Definição dos pinos - igual ao seu código
#define ENTRADA_VP   36    //ED0 -    SENSOR DE BARREIRA
#define ENTRADA_VN   39    //ED1 -    SENSOR MAGAZINE RECUADO
#define ENTRADA_D34  34    //ED2 -    SENSOR MAGAZINE AVANÇADO
#define ENTRADA_D32  32    //ED3 -    SENSOR ROTATOR AVANÇADO
#define ENTRADA_D33  33    //ED4 -    PRESSOSTATO
#define ENTRADA_D25  25    //ED5 -    SENSOR ROTATIVO RECUADO
#define ENTRADA_D26  26    //ED6 -    
#define ENTRADA_D27  27    //ED7 -

#define SAIDA_D23  23    //SD0 -     AVANÇO DO ATUADOR ROTATIVO
#define SAIDA_D22  22    //SD1 -     RECUADO
#define SAIDA_D21  21    //SD2 -     ATUADOR MAGAZINE
#define SAIDA_D19  19    //SD3 -     VÁCUO
#define SAIDA_D18  18    //SD4 -     SOLTA PEÇA (CONTROLE DO VÁCUO)
#define SAIDA_TX2  17    //SD5 - 
#define SAIDA_RX2  16    //SD6 - 
#define SAIDA_D4   4     //SD7 - 

// WiFi credentials
const char* ssid = "Emilly sem a";
const char* password = "xiribits";

WiFiServer server(80);

// Estado da máquina
enum Estado {
    ESTADO_1,
    ESTADO_2,
    ESTADO_3,
    ESTADO_4,
    ESTADO_5,
    ESTADO_6,
    ESTADO_7,
    ESTADO_8,
    ESTADO_9,
    ESTADO_10,
};

Estado estadoAtual = ESTADO_1;

// Variável para controlar delays sem travar loop
unsigned long lastMillis = 0;

void setup() {
  Serial.begin(115200);

  // Configurar entradas
  pinMode(ENTRADA_VP, INPUT);
  pinMode(ENTRADA_VN, INPUT);
  pinMode(ENTRADA_D34, INPUT);
  pinMode(ENTRADA_D32, INPUT);
  pinMode(ENTRADA_D33, INPUT);
  pinMode(ENTRADA_D25, INPUT);
  pinMode(ENTRADA_D26, INPUT);
  pinMode(ENTRADA_D27, INPUT);

  // Configurar saídas
  pinMode(SAIDA_D23, OUTPUT);
  pinMode(SAIDA_D22, OUTPUT);
  pinMode(SAIDA_D21, OUTPUT);
  pinMode(SAIDA_D19, OUTPUT);
  pinMode(SAIDA_D18, OUTPUT);
  pinMode(SAIDA_TX2, OUTPUT);
  pinMode(SAIDA_RX2, OUTPUT);
  pinMode(SAIDA_D4, OUTPUT);

  // Reset das saídas
  digitalWrite(SAIDA_TX2, LOW);
  digitalWrite(SAIDA_RX2, LOW);
  digitalWrite(SAIDA_D4, LOW);
  digitalWrite(SAIDA_D23, LOW);
  digitalWrite(SAIDA_D22, LOW);
  digitalWrite(SAIDA_D21, LOW);
  digitalWrite(SAIDA_D19, LOW);
  digitalWrite(SAIDA_D18, LOW);

  // Conectar WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando ao WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  server.begin();
}

void processaEstado() {
  switch (estadoAtual) {
    case ESTADO_1:
      if (digitalRead(ENTRADA_VP) == LOW) {
        digitalWrite(SAIDA_D21, HIGH);
        estadoAtual = ESTADO_2;
      }
      break;

    case ESTADO_2:
      if (digitalRead(ENTRADA_D34) == HIGH) {
        digitalWrite(SAIDA_D21, LOW);
        digitalWrite(SAIDA_D23, HIGH);
        digitalWrite(SAIDA_D19, HIGH);
        delay(1000); // pode ser melhorado para não travar loop
        estadoAtual = ESTADO_3;
      }
      break;

    case ESTADO_3:
      if (digitalRead(ENTRADA_D32) == HIGH) {
        digitalWrite(SAIDA_D23, LOW);
        digitalWrite(SAIDA_D22, HIGH);
        delay(2000);
        estadoAtual = ESTADO_4;
      }
      break;

    case ESTADO_4:
      if (digitalRead(ENTRADA_D25) == HIGH) {
        digitalWrite(SAIDA_D19, LOW);
        digitalWrite(SAIDA_D18, HIGH);
        delay(1000);
        estadoAtual = ESTADO_5;
      }
      break;

    case ESTADO_5:
      if (digitalRead(ENTRADA_D25) == HIGH) {
        digitalWrite(SAIDA_D22, LOW);
        digitalWrite(SAIDA_D23, HIGH);
        delay(1300);
        digitalWrite(SAIDA_D23, LOW);
        digitalWrite(SAIDA_D18, LOW);
        estadoAtual = ESTADO_1;
      }
      break;

    default:
      estadoAtual = ESTADO_1;
      break;
  }
}

void handleClient() {
  WiFiClient client = server.available();
  if (client) {
    Serial.println("Cliente conectado");
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        if (c == '\n') {
          if (currentLine.length() == 0) {
            // Responde página web
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            client.println("<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Controle Máquina</title></head><body>");
            client.println("<h1>Status Sensores</h1>");
            client.printf("<p>Sensor VP (barreira): %d</p>", digitalRead(ENTRADA_VP));
            client.printf("<p>Sensor VN (magazine recuado): %d</p>", digitalRead(ENTRADA_VN));
            client.printf("<p>Sensor D34 (magazine avançado): %d</p>", digitalRead(ENTRADA_D34));
            client.printf("<p>Sensor D32 (rotator avançado): %d</p>", digitalRead(ENTRADA_D32));
            client.printf("<p>Sensor D25 (rotativo recuado): %d</p>", digitalRead(ENTRADA_D25));
            client.println("<h2>Controle Saídas</h2>");
            client.println("<p><a href=\"/saida21/on\">Ligar Atuador Magazine (SAIDA_D21)</a></p>");
            client.println("<p><a href=\"/saida21/off\">Desligar Atuador Magazine (SAIDA_D21)</a></p>");
            client.println("<p><a href=\"/saida23/on\">Ligar Atuador Avanço (SAIDA_D23)</a></p>");
            client.println("<p><a href=\"/saida23/off\">Desligar Atuador Avanço (SAIDA_D23)</a></p>");
            client.println("</body></html>");

            break;
          } else {
            // Processa requisição para ligar/desligar saídas
            if (currentLine.startsWith("GET /saida21/on")) {
              digitalWrite(SAIDA_D21, HIGH);
            } else if (currentLine.startsWith("GET /saida21/off")) {
              digitalWrite(SAIDA_D21, LOW);
            } else if (currentLine.startsWith("GET /saida23/on")) {
              digitalWrite(SAIDA_D23, HIGH);
            } else if (currentLine.startsWith("GET /saida23/off")) {
              digitalWrite(SAIDA_D23, LOW);
            }
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    delay(1);
    client.stop();
    Serial.println("Cliente desconectado");
  }
}

void loop() {
  processaEstado();
  handleClient();
}

